// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: product.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_AddProducts_FullMethodName        = "/product.ProductService/AddProducts"
	ProductService_GetProduct_FullMethodName         = "/product.ProductService/GetProduct"
	ProductService_GetAllProducts_FullMethodName     = "/product.ProductService/GetAllProducts"
	ProductService_UpdateStock_FullMethodName        = "/product.ProductService/UpdateStock"
	ProductService_GetArrayofProducts_FullMethodName = "/product.ProductService/GetArrayofProducts"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	AddProducts(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponce, error)
	GetProduct(ctx context.Context, in *GetProductByID, opts ...grpc.CallOption) (*AddProductResponce, error)
	GetAllProducts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProductService_GetAllProductsClient, error)
	UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*AddProductResponce, error)
	GetArrayofProducts(ctx context.Context, opts ...grpc.CallOption) (ProductService_GetArrayofProductsClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) AddProducts(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponce, error) {
	out := new(AddProductResponce)
	err := c.cc.Invoke(ctx, ProductService_AddProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductByID, opts ...grpc.CallOption) (*AddProductResponce, error) {
	out := new(AddProductResponce)
	err := c.cc.Invoke(ctx, ProductService_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllProducts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProductService_GetAllProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], ProductService_GetAllProducts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetAllProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_GetAllProductsClient interface {
	Recv() (*AddProductResponce, error)
	grpc.ClientStream
}

type productServiceGetAllProductsClient struct {
	grpc.ClientStream
}

func (x *productServiceGetAllProductsClient) Recv() (*AddProductResponce, error) {
	m := new(AddProductResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*AddProductResponce, error) {
	out := new(AddProductResponce)
	err := c.cc.Invoke(ctx, ProductService_UpdateStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetArrayofProducts(ctx context.Context, opts ...grpc.CallOption) (ProductService_GetArrayofProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], ProductService_GetArrayofProducts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetArrayofProductsClient{stream}
	return x, nil
}

type ProductService_GetArrayofProductsClient interface {
	Send(*GetProductByID) error
	Recv() (*AddProductResponce, error)
	grpc.ClientStream
}

type productServiceGetArrayofProductsClient struct {
	grpc.ClientStream
}

func (x *productServiceGetArrayofProductsClient) Send(m *GetProductByID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceGetArrayofProductsClient) Recv() (*AddProductResponce, error) {
	m := new(AddProductResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	AddProducts(context.Context, *AddProductRequest) (*AddProductResponce, error)
	GetProduct(context.Context, *GetProductByID) (*AddProductResponce, error)
	GetAllProducts(*empty.Empty, ProductService_GetAllProductsServer) error
	UpdateStock(context.Context, *UpdateStockRequest) (*AddProductResponce, error)
	GetArrayofProducts(ProductService_GetArrayofProductsServer) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) AddProducts(context.Context, *AddProductRequest) (*AddProductResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProducts not implemented")
}
func (UnimplementedProductServiceServer) GetProduct(context.Context, *GetProductByID) (*AddProductResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductServiceServer) GetAllProducts(*empty.Empty, ProductService_GetAllProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductServiceServer) UpdateStock(context.Context, *UpdateStockRequest) (*AddProductResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedProductServiceServer) GetArrayofProducts(ProductService_GetArrayofProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArrayofProducts not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_AddProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddProducts(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetAllProducts(m, &productServiceGetAllProductsServer{stream})
}

type ProductService_GetAllProductsServer interface {
	Send(*AddProductResponce) error
	grpc.ServerStream
}

type productServiceGetAllProductsServer struct {
	grpc.ServerStream
}

func (x *productServiceGetAllProductsServer) Send(m *AddProductResponce) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateStock(ctx, req.(*UpdateStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetArrayofProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).GetArrayofProducts(&productServiceGetArrayofProductsServer{stream})
}

type ProductService_GetArrayofProductsServer interface {
	Send(*AddProductResponce) error
	Recv() (*GetProductByID, error)
	grpc.ServerStream
}

type productServiceGetArrayofProductsServer struct {
	grpc.ServerStream
}

func (x *productServiceGetArrayofProductsServer) Send(m *AddProductResponce) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceGetArrayofProductsServer) Recv() (*GetProductByID, error) {
	m := new(GetProductByID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProducts",
			Handler:    _ProductService_AddProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _ProductService_UpdateStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProducts",
			Handler:       _ProductService_GetAllProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetArrayofProducts",
			Handler:       _ProductService_GetArrayofProducts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "product.proto",
}
