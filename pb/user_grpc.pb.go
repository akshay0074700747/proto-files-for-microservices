// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_SignupUser_FullMethodName           = "/user.UserService/SignupUser"
	UserService_LoginUser_FullMethodName            = "/user.UserService/LoginUser"
	UserService_GetUser_FullMethodName              = "/user.UserService/GetUser"
	UserService_GetAdmin_FullMethodName             = "/user.UserService/GetAdmin"
	UserService_GetSuAdmin_FullMethodName           = "/user.UserService/GetSuAdmin"
	UserService_GetAllUsersResponce_FullMethodName  = "/user.UserService/GetAllUsersResponce"
	UserService_GetAllAdminsResponce_FullMethodName = "/user.UserService/GetAllAdminsResponce"
	UserService_AddAdmin_FullMethodName             = "/user.UserService/AddAdmin"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SignupUser(ctx context.Context, in *SignupUserRequest, opts ...grpc.CallOption) (*UserResponce, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserResponce, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponce, error)
	GetAdmin(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponce, error)
	GetSuAdmin(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponce, error)
	GetAllUsersResponce(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserService_GetAllUsersResponceClient, error)
	GetAllAdminsResponce(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserService_GetAllAdminsResponceClient, error)
	AddAdmin(ctx context.Context, in *SignupUserRequest, opts ...grpc.CallOption) (*UserResponce, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SignupUser(ctx context.Context, in *SignupUserRequest, opts ...grpc.CallOption) (*UserResponce, error) {
	out := new(UserResponce)
	err := c.cc.Invoke(ctx, UserService_SignupUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserResponce, error) {
	out := new(UserResponce)
	err := c.cc.Invoke(ctx, UserService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponce, error) {
	out := new(UserResponce)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAdmin(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponce, error) {
	out := new(UserResponce)
	err := c.cc.Invoke(ctx, UserService_GetAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSuAdmin(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponce, error) {
	out := new(UserResponce)
	err := c.cc.Invoke(ctx, UserService_GetSuAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsersResponce(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserService_GetAllUsersResponceClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_GetAllUsersResponce_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllUsersResponceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllUsersResponceClient interface {
	Recv() (*UserResponce, error)
	grpc.ClientStream
}

type userServiceGetAllUsersResponceClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllUsersResponceClient) Recv() (*UserResponce, error) {
	m := new(UserResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetAllAdminsResponce(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserService_GetAllAdminsResponceClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_GetAllAdminsResponce_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllAdminsResponceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllAdminsResponceClient interface {
	Recv() (*UserResponce, error)
	grpc.ClientStream
}

type userServiceGetAllAdminsResponceClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllAdminsResponceClient) Recv() (*UserResponce, error) {
	m := new(UserResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddAdmin(ctx context.Context, in *SignupUserRequest, opts ...grpc.CallOption) (*UserResponce, error) {
	out := new(UserResponce)
	err := c.cc.Invoke(ctx, UserService_AddAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	SignupUser(context.Context, *SignupUserRequest) (*UserResponce, error)
	LoginUser(context.Context, *LoginRequest) (*UserResponce, error)
	GetUser(context.Context, *UserRequest) (*UserResponce, error)
	GetAdmin(context.Context, *UserRequest) (*UserResponce, error)
	GetSuAdmin(context.Context, *UserRequest) (*UserResponce, error)
	GetAllUsersResponce(*empty.Empty, UserService_GetAllUsersResponceServer) error
	GetAllAdminsResponce(*empty.Empty, UserService_GetAllAdminsResponceServer) error
	AddAdmin(context.Context, *SignupUserRequest) (*UserResponce, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) SignupUser(context.Context, *SignupUserRequest) (*UserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginRequest) (*UserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *UserRequest) (*UserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetAdmin(context.Context, *UserRequest) (*UserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (UnimplementedUserServiceServer) GetSuAdmin(context.Context, *UserRequest) (*UserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuAdmin not implemented")
}
func (UnimplementedUserServiceServer) GetAllUsersResponce(*empty.Empty, UserService_GetAllUsersResponceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUsersResponce not implemented")
}
func (UnimplementedUserServiceServer) GetAllAdminsResponce(*empty.Empty, UserService_GetAllAdminsResponceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAdminsResponce not implemented")
}
func (UnimplementedUserServiceServer) AddAdmin(context.Context, *SignupUserRequest) (*UserResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdmin not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SignupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignupUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignupUser(ctx, req.(*SignupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAdmin(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSuAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSuAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSuAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSuAdmin(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsersResponce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllUsersResponce(m, &userServiceGetAllUsersResponceServer{stream})
}

type UserService_GetAllUsersResponceServer interface {
	Send(*UserResponce) error
	grpc.ServerStream
}

type userServiceGetAllUsersResponceServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllUsersResponceServer) Send(m *UserResponce) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetAllAdminsResponce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllAdminsResponce(m, &userServiceGetAllAdminsResponceServer{stream})
}

type UserService_GetAllAdminsResponceServer interface {
	Send(*UserResponce) error
	grpc.ServerStream
}

type userServiceGetAllAdminsResponceServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllAdminsResponceServer) Send(m *UserResponce) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddAdmin(ctx, req.(*SignupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignupUser",
			Handler:    _UserService_SignupUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _UserService_GetAdmin_Handler,
		},
		{
			MethodName: "GetSuAdmin",
			Handler:    _UserService_GetSuAdmin_Handler,
		},
		{
			MethodName: "AddAdmin",
			Handler:    _UserService_AddAdmin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUsersResponce",
			Handler:       _UserService_GetAllUsersResponce_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllAdminsResponce",
			Handler:       _UserService_GetAllAdminsResponce_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
