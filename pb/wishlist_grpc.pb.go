// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: wishlist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WishlistService_CreateWishlist_FullMethodName     = "/wishlist.WishlistService/CreateWishlist"
	WishlistService_GetWishlist_FullMethodName        = "/wishlist.WishlistService/GetWishlist"
	WishlistService_AddtoWishlist_FullMethodName      = "/wishlist.WishlistService/AddtoWishlist"
	WishlistService_DeleteWishlistItem_FullMethodName = "/wishlist.WishlistService/DeleteWishlistItem"
	WishlistService_TruncateWishlist_FullMethodName   = "/wishlist.WishlistService/TruncateWishlist"
)

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	CreateWishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponce, error)
	GetWishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (WishlistService_GetWishlistClient, error)
	AddtoWishlist(ctx context.Context, in *AddtoWishlistRequest, opts ...grpc.CallOption) (*AddProductResponce, error)
	DeleteWishlistItem(ctx context.Context, in *AddtoWishlistRequest, opts ...grpc.CallOption) (WishlistService_DeleteWishlistItemClient, error)
	TruncateWishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponce, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) CreateWishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponce, error) {
	out := new(WishlistResponce)
	err := c.cc.Invoke(ctx, WishlistService_CreateWishlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetWishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (WishlistService_GetWishlistClient, error) {
	stream, err := c.cc.NewStream(ctx, &WishlistService_ServiceDesc.Streams[0], WishlistService_GetWishlist_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wishlistServiceGetWishlistClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WishlistService_GetWishlistClient interface {
	Recv() (*AddProductResponce, error)
	grpc.ClientStream
}

type wishlistServiceGetWishlistClient struct {
	grpc.ClientStream
}

func (x *wishlistServiceGetWishlistClient) Recv() (*AddProductResponce, error) {
	m := new(AddProductResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wishlistServiceClient) AddtoWishlist(ctx context.Context, in *AddtoWishlistRequest, opts ...grpc.CallOption) (*AddProductResponce, error) {
	out := new(AddProductResponce)
	err := c.cc.Invoke(ctx, WishlistService_AddtoWishlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishlistItem(ctx context.Context, in *AddtoWishlistRequest, opts ...grpc.CallOption) (WishlistService_DeleteWishlistItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &WishlistService_ServiceDesc.Streams[1], WishlistService_DeleteWishlistItem_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wishlistServiceDeleteWishlistItemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WishlistService_DeleteWishlistItemClient interface {
	Recv() (*AddProductResponce, error)
	grpc.ClientStream
}

type wishlistServiceDeleteWishlistItemClient struct {
	grpc.ClientStream
}

func (x *wishlistServiceDeleteWishlistItemClient) Recv() (*AddProductResponce, error) {
	m := new(AddProductResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wishlistServiceClient) TruncateWishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponce, error) {
	out := new(WishlistResponce)
	err := c.cc.Invoke(ctx, WishlistService_TruncateWishlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility
type WishlistServiceServer interface {
	CreateWishlist(context.Context, *WishlistRequest) (*WishlistResponce, error)
	GetWishlist(*WishlistRequest, WishlistService_GetWishlistServer) error
	AddtoWishlist(context.Context, *AddtoWishlistRequest) (*AddProductResponce, error)
	DeleteWishlistItem(*AddtoWishlistRequest, WishlistService_DeleteWishlistItemServer) error
	TruncateWishlist(context.Context, *WishlistRequest) (*WishlistResponce, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWishlistServiceServer struct {
}

func (UnimplementedWishlistServiceServer) CreateWishlist(context.Context, *WishlistRequest) (*WishlistResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) GetWishlist(*WishlistRequest, WishlistService_GetWishlistServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) AddtoWishlist(context.Context, *AddtoWishlistRequest) (*AddProductResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddtoWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishlistItem(*AddtoWishlistRequest, WishlistService_DeleteWishlistItemServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteWishlistItem not implemented")
}
func (UnimplementedWishlistServiceServer) TruncateWishlist(context.Context, *WishlistRequest) (*WishlistResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_CreateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_CreateWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, req.(*WishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetWishlist_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WishlistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WishlistServiceServer).GetWishlist(m, &wishlistServiceGetWishlistServer{stream})
}

type WishlistService_GetWishlistServer interface {
	Send(*AddProductResponce) error
	grpc.ServerStream
}

type wishlistServiceGetWishlistServer struct {
	grpc.ServerStream
}

func (x *wishlistServiceGetWishlistServer) Send(m *AddProductResponce) error {
	return x.ServerStream.SendMsg(m)
}

func _WishlistService_AddtoWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddtoWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddtoWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_AddtoWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddtoWishlist(ctx, req.(*AddtoWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishlistItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddtoWishlistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WishlistServiceServer).DeleteWishlistItem(m, &wishlistServiceDeleteWishlistItemServer{stream})
}

type WishlistService_DeleteWishlistItemServer interface {
	Send(*AddProductResponce) error
	grpc.ServerStream
}

type wishlistServiceDeleteWishlistItemServer struct {
	grpc.ServerStream
}

func (x *wishlistServiceDeleteWishlistItemServer) Send(m *AddProductResponce) error {
	return x.ServerStream.SendMsg(m)
}

func _WishlistService_TruncateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).TruncateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_TruncateWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).TruncateWishlist(ctx, req.(*WishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWishlist",
			Handler:    _WishlistService_CreateWishlist_Handler,
		},
		{
			MethodName: "AddtoWishlist",
			Handler:    _WishlistService_AddtoWishlist_Handler,
		},
		{
			MethodName: "TruncateWishlist",
			Handler:    _WishlistService_TruncateWishlist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWishlist",
			Handler:       _WishlistService_GetWishlist_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteWishlistItem",
			Handler:       _WishlistService_DeleteWishlistItem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wishlist.proto",
}
