// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: order.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_AddOrder_FullMethodName             = "/order.OrderService/AddOrder"
	OrderService_GetOrdersByUser_FullMethodName      = "/order.OrderService/GetOrdersByUser"
	OrderService_GetAllOrdersResponce_FullMethodName = "/order.OrderService/GetAllOrdersResponce"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponce, error)
	GetOrdersByUser(ctx context.Context, in *GetOrdersByUserRequest, opts ...grpc.CallOption) (OrderService_GetOrdersByUserClient, error)
	GetAllOrdersResponce(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (OrderService_GetAllOrdersResponceClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponce, error) {
	out := new(AddOrderResponce)
	err := c.cc.Invoke(ctx, OrderService_AddOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByUser(ctx context.Context, in *GetOrdersByUserRequest, opts ...grpc.CallOption) (OrderService_GetOrdersByUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], OrderService_GetOrdersByUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetOrdersByUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetOrdersByUserClient interface {
	Recv() (*OrdersOnly, error)
	grpc.ClientStream
}

type orderServiceGetOrdersByUserClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetOrdersByUserClient) Recv() (*OrdersOnly, error) {
	m := new(OrdersOnly)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetAllOrdersResponce(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (OrderService_GetAllOrdersResponceClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[1], OrderService_GetAllOrdersResponce_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetAllOrdersResponceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetAllOrdersResponceClient interface {
	Recv() (*AddOrderResponce, error)
	grpc.ClientStream
}

type orderServiceGetAllOrdersResponceClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetAllOrdersResponceClient) Recv() (*AddOrderResponce, error) {
	m := new(AddOrderResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	AddOrder(context.Context, *AddOrderRequest) (*AddOrderResponce, error)
	GetOrdersByUser(*GetOrdersByUserRequest, OrderService_GetOrdersByUserServer) error
	GetAllOrdersResponce(*empty.Empty, OrderService_GetAllOrdersResponceServer) error
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) AddOrder(context.Context, *AddOrderRequest) (*AddOrderResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByUser(*GetOrdersByUserRequest, OrderService_GetOrdersByUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrdersByUser not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersResponce(*empty.Empty, OrderService_GetAllOrdersResponceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrdersResponce not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrdersByUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetOrdersByUser(m, &orderServiceGetOrdersByUserServer{stream})
}

type OrderService_GetOrdersByUserServer interface {
	Send(*OrdersOnly) error
	grpc.ServerStream
}

type orderServiceGetOrdersByUserServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetOrdersByUserServer) Send(m *OrdersOnly) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetAllOrdersResponce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetAllOrdersResponce(m, &orderServiceGetAllOrdersResponceServer{stream})
}

type OrderService_GetAllOrdersResponceServer interface {
	Send(*AddOrderResponce) error
	grpc.ServerStream
}

type orderServiceGetAllOrdersResponceServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetAllOrdersResponceServer) Send(m *AddOrderResponce) error {
	return x.ServerStream.SendMsg(m)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _OrderService_AddOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrdersByUser",
			Handler:       _OrderService_GetOrdersByUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllOrdersResponce",
			Handler:       _OrderService_GetAllOrdersResponce_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
